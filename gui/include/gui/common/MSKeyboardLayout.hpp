/*
 * MSKeyboardLayout.hpp
 *
 *  Created on: Mar 28, 2018
 *      Author: artyom
 */

#ifndef GUI_INCLUDE_GUI_COMMON_MSKEYBOARDLAYOUT_HPP_
#define GUI_INCLUDE_GUI_COMMON_MSKEYBOARDLAYOUT_HPP_

#include <touchgfx/widgets/Keyboard.hpp>
#include <touchgfx/hal/Types.hpp>
#include <fonts/ApplicationFontProvider.hpp>
#include "BitmapDatabase.hpp"

using namespace touchgfx;

#define ALPHA_BASE_X			30
#define ALPHA_BASE_Y			128

#define ALPHA_BUTN_SIZE_X		30
#define ALPHA_BUTN_SIZE_Y		32

#define SPACE_BUTN_SIZE_X		302
#define SPACE_BUTN_SIZE_Y		32

#define ALPHA_BUTN_SPACE_X		(ALPHA_BUTN_SIZE_X + 4)
#define ALPHA_BUTN_SPACE_Y		(ALPHA_BUTN_SIZE_Y + 4)

#define ALPHA_KEY				BITMAP_KEY_BUTTON_PRESSED_ID
#define SPACE_KEY				BITMAP_SPACE_BUTTON_PRESSED_ID

/**
 * Array specifying the keys used in the CustomKeyboard.
 */
static const Keyboard::Key MSKeyArray[27] =
{
    { 1, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 0, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{ 2, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 1, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{ 3, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 2, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{ 4, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 3, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{ 5, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 4, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{ 6, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 5, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{ 7, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 6, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{ 8, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 7, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},

	{ 9, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 0, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{10, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 1, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{11, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 2, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{12, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 3, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{13, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 4, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{14, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 5, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{15, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 6, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{16, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 7, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{17, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 8, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 1, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},

	{18, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 0, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{19, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 1, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{20, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 2, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{21, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 3, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{22, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 4, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{23, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 5, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{24, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 6, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{25, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 7, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},
	{26, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 8, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 2, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), ALPHA_KEY},

	{27, Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 0, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 3, SPACE_BUTN_SIZE_X, SPACE_BUTN_SIZE_Y), SPACE_KEY}
};

/**
 * Callback areas for the special buttons on the CustomKeyboard.
 */
static Keyboard::CallbackArea MSCallbackAreas[3] =
{
    {Rect(ALPHA_BASE_X + ALPHA_BUTN_SPACE_X * 8, ALPHA_BASE_Y + ALPHA_BUTN_SPACE_Y * 0, ALPHA_BUTN_SIZE_X, ALPHA_BUTN_SIZE_Y), 0, ALPHA_KEY},  // backspace
	{Rect(364, 126, 96, 40), 0, BITMAP_BUTTON_PRESSED_ID},  	   	// enter
	{Rect(364, 179, 96, 40), 0, BITMAP_BUTTON_PRESSED_ID},   		//cancel
};

/**
 * The layout for the CustomKeyboard.
 */
static Keyboard::Layout MSLayout =
{
	BITMAP_MS_KEYBOARD_ID,
    MSKeyArray,
    27,
    MSCallbackAreas,
    3,
    Rect(36, 34, 302, 126),
    TypedText(T_MS_TEXT),
    0,
    Typography::ALPHA_TEXT_BTN,
    0
};

#endif /* GUI_INCLUDE_GUI_COMMON_MSKEYBOARDLAYOUT_HPP_ */
